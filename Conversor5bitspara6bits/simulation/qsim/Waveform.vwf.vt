// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2025 03:45:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Conversor5bitspara6bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Conversor5bitspara6bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN0;
reg IN1;
reg IN2;
reg IN3;
reg Sinal;
// wires                                               
wire [5:0] OUT;

// assign statements (if any)                          
Conversor5bitspara6bits i1 (
// port map - connection between master ports and signals/registers   
	.IN0(IN0),
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.OUT(OUT),
	.Sinal(Sinal)
);
initial 
begin 
#1000000 $finish;
end 

// IN0
initial
begin
	repeat(8)
	begin
		IN0 = 1'b0;
		IN0 = #60000 1'b1;
		# 60000;
	end
	IN0 = 1'b0;
end 

// IN1
initial
begin
	repeat(4)
	begin
		IN1 = 1'b0;
		IN1 = #120000 1'b1;
		# 120000;
	end
	IN1 = 1'b0;
end 

// IN2
initial
begin
	repeat(2)
	begin
		IN2 = 1'b0;
		IN2 = #180000 1'b1;
		# 180000;
	end
	IN2 = 1'b0;
	IN2 = #180000 1'b1;
end 

// IN3
initial
begin
	repeat(2)
	begin
		IN3 = 1'b0;
		IN3 = #240000 1'b1;
		# 240000;
	end
	IN3 = 1'b0;
end 

// Sinal
initial
begin
	repeat(16)
	begin
		Sinal = 1'b0;
		Sinal = #30000 1'b1;
		# 30000;
	end
	Sinal = 1'b0;
	Sinal = #30000 1'b1;
end 
endmodule

