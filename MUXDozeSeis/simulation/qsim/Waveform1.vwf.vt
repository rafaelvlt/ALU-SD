// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2025 02:25:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MUXDozeSeis
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUXDozeSeis_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] NEG;
reg [5:0] POS;
reg Sinal;
// wires                                               
wire O0;
wire O1;
wire O2;
wire O3;
wire O4;
wire O5;

// assign statements (if any)                          
MUXDozeSeis i1 (
// port map - connection between master ports and signals/registers   
	.NEG(NEG),
	.O0(O0),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.O4(O4),
	.O5(O5),
	.POS(POS),
	.Sinal(Sinal)
);
initial 
begin 
#1000000 $finish;
end 
// NEG[ 5 ]
initial
begin
	NEG[5] = 1'b0;
	NEG[5] = #960000 1'b1;
end 
// NEG[ 4 ]
initial
begin
	NEG[4] = 1'b0;
	NEG[4] = #480000 1'b1;
	NEG[4] = #480000 1'b0;
end 
// NEG[ 3 ]
initial
begin
	repeat(2)
	begin
		NEG[3] = 1'b0;
		NEG[3] = #240000 1'b1;
		# 240000;
	end
	NEG[3] = 1'b0;
end 
// NEG[ 2 ]
initial
begin
	repeat(4)
	begin
		NEG[2] = 1'b0;
		NEG[2] = #120000 1'b1;
		# 120000;
	end
	NEG[2] = 1'b0;
end 
// NEG[ 1 ]
initial
begin
	repeat(8)
	begin
		NEG[1] = 1'b0;
		NEG[1] = #60000 1'b1;
		# 60000;
	end
	NEG[1] = 1'b0;
end 
// NEG[ 0 ]
initial
begin
	repeat(16)
	begin
		NEG[0] = 1'b0;
		NEG[0] = #30000 1'b1;
		# 30000;
	end
	NEG[0] = 1'b0;
	NEG[0] = #30000 1'b1;
end 
// POS[ 5 ]
initial
begin
	POS[5] = 1'b0;
end 
// POS[ 4 ]
initial
begin
	POS[4] = 1'b0;
	POS[4] = #960000 1'b1;
end 
// POS[ 3 ]
initial
begin
	POS[3] = 1'b0;
	POS[3] = #480000 1'b1;
	POS[3] = #480000 1'b0;
end 
// POS[ 2 ]
initial
begin
	repeat(2)
	begin
		POS[2] = 1'b0;
		POS[2] = #240000 1'b1;
		# 240000;
	end
	POS[2] = 1'b0;
end 
// POS[ 1 ]
initial
begin
	repeat(4)
	begin
		POS[1] = 1'b0;
		POS[1] = #120000 1'b1;
		# 120000;
	end
	POS[1] = 1'b0;
end 
// POS[ 0 ]
initial
begin
	repeat(8)
	begin
		POS[0] = 1'b0;
		POS[0] = #60000 1'b1;
		# 60000;
	end
	POS[0] = 1'b0;
end 

// Sinal
initial
begin
	repeat(5)
	begin
		Sinal = 1'b0;
		Sinal = #90000 1'b1;
		# 90000;
	end
	Sinal = 1'b0;
	Sinal = #90000 1'b1;
end 
endmodule

