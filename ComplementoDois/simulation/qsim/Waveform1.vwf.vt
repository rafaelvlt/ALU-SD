// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/28/2025 18:41:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ComplementoDois
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ComplementoDois_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E0;
reg E1;
reg E2;
reg E3;
reg E4;
reg E5;
// wires                                               
wire O0;
wire O1;
wire O2;
wire O3;
wire O4;
wire O5;

// assign statements (if any)                          
ComplementoDois i1 (
// port map - connection between master ports and signals/registers   
	.E0(E0),
	.E1(E1),
	.E2(E2),
	.E3(E3),
	.E4(E4),
	.E5(E5),
	.O0(O0),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.O4(O4),
	.O5(O5)
);
initial 
begin 
#1000000 $finish;
end 

// E0
always
begin
	E0 = 1'b0;
	E0 = #10000 1'b1;
	#10000;
end 

// E1
always
begin
	E1 = 1'b0;
	E1 = #20000 1'b1;
	#20000;
end 

// E2
initial
begin
	repeat(12)
	begin
		E2 = 1'b0;
		E2 = #40000 1'b1;
		# 40000;
	end
	E2 = 1'b0;
end 

// E3
initial
begin
	repeat(6)
	begin
		E3 = 1'b0;
		E3 = #80000 1'b1;
		# 80000;
	end
	E3 = 1'b0;
end 

// E4
initial
begin
	repeat(3)
	begin
		E4 = 1'b0;
		E4 = #160000 1'b1;
		# 160000;
	end
	E4 = 1'b0;
end 

// E5
initial
begin
	E5 = 1'b0;
	E5 = #320000 1'b1;
	E5 = #320000 1'b0;
	E5 = #320000 1'b1;
end 
endmodule

